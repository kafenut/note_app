可以说，远程仓库是git最强大的功能。并且有一个神奇的网站名为GitHub，只要你在GitHub上注册了账号，你就能获得其免费的远程仓库服务。

1.创建ssh密钥

要与GitHub通信，首先我们先要有自己的公、密钥对，输入以下命令即可创建自己的公、密钥对：

ssh-keygen -t -rsa -C "your email"

linux可以直接在命令行输入此命令，而windows需要在git bash中输入此命令。后续的生成选项都使用默认的就好了。生成完毕后，你应该能在在用户主目录里，看到一个.ssh的文件夹，那里面会有两个文件，一个叫id_rsa，是你的私钥，需要自己保存好，不能泄露给他人，另一个id_rsa.pub是你的公钥，是公开给他人的。

2.公开公钥

当你有了自己的公私钥后，你就可以在github上添加你的私钥了。
在GitHub上创建好账户后，打开setting设置选项，进入ssh and GPG keys页面，点击new ssh key。
title栏随便填就好，在key一栏把之前的id_rsa.pub粘贴进去即可。

这样GitHub就有了你的ssh公钥，之后你向GitHub推送commit时，GitHub便能通过你的公钥验证你的身份。

把以上两个准备工作做好后，我们便可以开始使用GitHub远程仓库了。

3.添加远程库

要添加远程仓库，首先我们需在GitHub上创建一个新的repository，这样我们就获得了一个空的远端仓库。
之后在我们已有的本地仓库里，将其与刚刚建立的远端仓库连接起来：

git remote add origin git@github.com: nickname/repo_name.git

origin是添加的远程仓库的名字，是git的默认叫法，可以换成其他的，不过一般没必要，反而给自己增加了不必要的记忆负担。

4.提交推送

刚开始远程仓库是空的，所以我们第一次可以使用一下命令，进行第一次推送：

git push -u origin master

这样我们便把本地的master分支推送给了远程的master分支，-u命令还会将远程master分支与本地master分支联系起来，在以后的pull 和 push中可以简化命令。

从此以后，只要本地进行了commit，我们便可以用一下命令把修改推送给远端仓库：

git push origin master

这样远程仓库和本地仓库就实现了同步。

5.ssh警告
在第一次使用ssh推送时，git会发出警告，询问该网站的key的指纹是否真的是GitHub的指纹。即询问应答的服务器是否真的是GitHub的服务器。
这里输入yes就行了，一般来说是不会出现有人伪装GitHub服务器的事情的，如果你还是担心的话，GitHub官网有给出key的指纹信息，自己比对下就行了。之后git会把该指纹信息列入白名单中，以后的推送就不会有这个警告了。